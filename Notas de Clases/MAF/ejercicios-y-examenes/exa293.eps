%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 479 295
%%HiResBoundingBox: 0 0 479 295.9375
%%Creator: (Mathematica NeXT 3.0)
%%Title: Clipboard
%%CreationDate: (Sometime) (Sometime)
%%DocumentNeededResources: (atend)
%%DocumentFonts: (atend)
%%DocumentNeededFonts: (atend)
%%EndComments
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
 	     Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
	      /Momatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/yscale exch def
	/ybias exch def
	/xscale exch def
	/xbias exch def
	/Momatrix
	xscale yscale matrix scale
	xbias ybias matrix translate
	matrix concatmatrix def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
	0 0 		moveto
	Mwidth 0 	lineto
	Mwidth Mheight 	lineto
	0 Mheight 	lineto
	fill
} bind def

/MPlotRegion {
	3 index
	Mwidth mul
	2 index
	Mheight mul
	translate
	exch sub
	Mheight mul
	/Mheight
	exch def
	exch sub
	Mwidth mul
	/Mwidth
	exch def
} bind def

/Mcharproc
{
  	currentfile
  	(x)
  	readhexstring
  	pop
  	0 get
  	exch
 	div
} bind def

/Mshadeproc
{
	dup
	3 1
	roll
	{
	dup
	Mcharproc
	3 1
	roll
	} repeat
	1 eq
	{
	setgray
	}
	{
	3 eq
	{
	setrgbcolor
	}
	{
	setcmykcolor
	} ifelse
	} ifelse
} bind def

/Mrectproc
{
	3 index
	2 index
	moveto
	2 index
	3 -1
	roll
	lineto
	dup
	3 1
	roll
	lineto
	lineto
	fill
} bind def

/Mcolorimage
{
	7 1
	roll
	pop
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	9 index
	Mshadeproc
	Mrectproc
	} for
	pop
	} for
	pop pop pop pop
} bind def

/Mimage
{
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub 
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	Mcharproc
	setgray
	Mrectproc
	} for
	pop
	} for
	pop pop pop
} bind def
/Mnodistort true def
/colorimage where
{ pop /Mcolorimage {colorimage} bind def /Mimage {image} bind def}
{
/colorimage {Mcolorimage} bind def
} ifelse
/Mleft		0.000000 def
/Mbottom	0.000000 def
/Mwidth		479.000000 def
/Mheight	295.937500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.02381 0.038095 0.245386 0.735743 [
[.21429 .23289 -3 -9 ]
[.21429 .23289 3 0 ]
[.40476 .23289 -6 -9 ]
[.40476 .23289 6 0 ]
[.59524 .23289 -6 -9 ]
[.59524 .23289 6 0 ]
[.78571 .23289 -6 -9 ]
[.78571 .23289 6 0 ]
[.97619 .23289 -6 -9 ]
[.97619 .23289 6 0 ]
[.01131 .09824 -24 -4.5 ]
[.01131 .09824 0 4.5 ]
[.01131 .39253 -18 -4.5 ]
[.01131 .39253 0 4.5 ]
[.01131 .53968 -18 -4.5 ]
[.01131 .53968 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.21429 .24539 m
.21429 .25164 L
s
[(5)] .21429 .23289 0 1 Mshowa
.40476 .24539 m
.40476 .25164 L
s
[(10)] .40476 .23289 0 1 Mshowa
.59524 .24539 m
.59524 .25164 L
s
[(15)] .59524 .23289 0 1 Mshowa
.78571 .24539 m
.78571 .25164 L
s
[(20)] .78571 .23289 0 1 Mshowa
.97619 .24539 m
.97619 .25164 L
s
[(25)] .97619 .23289 0 1 Mshowa
.125 Mabswid
.0619 .24539 m
.0619 .24914 L
s
.1 .24539 m
.1 .24914 L
s
.1381 .24539 m
.1381 .24914 L
s
.17619 .24539 m
.17619 .24914 L
s
.25238 .24539 m
.25238 .24914 L
s
.29048 .24539 m
.29048 .24914 L
s
.32857 .24539 m
.32857 .24914 L
s
.36667 .24539 m
.36667 .24914 L
s
.44286 .24539 m
.44286 .24914 L
s
.48095 .24539 m
.48095 .24914 L
s
.51905 .24539 m
.51905 .24914 L
s
.55714 .24539 m
.55714 .24914 L
s
.63333 .24539 m
.63333 .24914 L
s
.67143 .24539 m
.67143 .24914 L
s
.70952 .24539 m
.70952 .24914 L
s
.74762 .24539 m
.74762 .24914 L
s
.82381 .24539 m
.82381 .24914 L
s
.8619 .24539 m
.8619 .24914 L
s
.9 .24539 m
.9 .24914 L
s
.9381 .24539 m
.9381 .24914 L
s
.25 Mabswid
0 .24539 m
1 .24539 L
s
.02381 .09824 m
.03006 .09824 L
s
[(-0.2)] .01131 .09824 1 0 Mshowa
.02381 .39253 m
.03006 .39253 L
s
[(0.2)] .01131 .39253 1 0 Mshowa
.02381 .53968 m
.03006 .53968 L
s
[(0.4)] .01131 .53968 1 0 Mshowa
.125 Mabswid
.02381 .13502 m
.02756 .13502 L
s
.02381 .17181 m
.02756 .17181 L
s
.02381 .2086 m
.02756 .2086 L
s
.02381 .28217 m
.02756 .28217 L
s
.02381 .31896 m
.02756 .31896 L
s
.02381 .35575 m
.02756 .35575 L
s
.02381 .42932 m
.02756 .42932 L
s
.02381 .46611 m
.02756 .46611 L
s
.02381 .5029 m
.02756 .5029 L
s
.02381 .06145 m
.02756 .06145 L
s
.02381 .02466 m
.02756 .02466 L
s
.02381 .57647 m
.02756 .57647 L
s
.02381 .61326 m
.02756 .61326 L
s
.25 Mabswid
.02381 0 m
.02381 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .24539 m
.02499 .24547 L
.02605 .2457 L
.02729 .24615 L
.02846 .24675 L
.03053 .24824 L
.03279 .25047 L
.03527 .25364 L
.0379 .25782 L
.04262 .26735 L
.05205 .29366 L
.06244 .33213 L
.08274 .42475 L
.09394 .47785 L
.10458 .52414 L
.11464 .56059 L
.11995 .57598 L
.12562 .5889 L
.12831 .59368 L
.13085 .59733 L
.13313 .59989 L
.13431 .60094 L
.1356 .60187 L
.13681 .60254 L
.13795 .60298 L
.13914 .60325 L
.14043 .60332 L
.14162 .60317 L
.14275 .60285 L
.14376 .60241 L
.14487 .60176 L
.1472 .59981 L
.14972 .59684 L
.15209 .5932 L
.15427 .58917 L
.15932 .57725 L
.16464 .56094 L
.17467 .52043 L
.18565 .46353 L
.2069 .3292 L
.22621 .20199 L
.23585 .14482 L
.24629 .09196 L
.25109 .07169 L
.25616 .05332 L
.26083 .03943 L
.26526 .02902 L
.26761 .02462 L
.27019 .02073 L
.27252 .01803 L
Mistroke
.27357 .01708 L
.27469 .01624 L
.27538 .01581 L
.27602 .01548 L
.27727 .015 L
.2784 .01476 L
.2796 .01472 L
.28089 .0149 L
.2821 .01528 L
.28342 .01594 L
.28483 .01692 L
.28719 .01919 L
.28976 .02252 L
.29441 .03084 L
.29895 .04162 L
.30314 .05378 L
.32185 .12911 L
.34246 .23485 L
.36348 .33842 L
.37267 .37511 L
.37753 .39136 L
.38272 .40597 L
.38785 .41745 L
.39251 .42517 L
.39475 .42795 L
.39594 .42916 L
.39719 .43026 L
.39828 .43106 L
.39949 .43176 L
.40058 .43225 L
.4016 .43256 L
.40283 .43278 L
.40353 .43281 L
.40417 .43279 L
.40535 .43262 L
.40661 .43225 L
.40773 .43176 L
.40878 .43116 L
.41118 .42928 L
.41376 .4265 L
.41612 .42327 L
.42146 .41366 L
.42619 .4026 L
.43124 .38836 L
.44036 .35726 L
.46105 .2698 L
.48094 .18296 L
.49141 .14386 L
.49715 .12579 L
.50251 .11144 L
Mistroke
.50768 .10021 L
.5124 .0923 L
.51509 .08884 L
.51765 .08628 L
.51896 .08525 L
.52035 .08435 L
.52115 .08393 L
.52187 .08361 L
.52255 .08336 L
.52329 .08315 L
.52449 .08293 L
.52576 .08288 L
.52694 .08298 L
.52804 .08321 L
.52933 .08366 L
.53051 .08422 L
.53188 .08506 L
.53317 .08603 L
.53762 .09073 L
.54014 .09429 L
.54246 .09813 L
.5521 .11937 L
.56114 .14605 L
.58175 .22256 L
.60024 .29486 L
.61072 .33083 L
.62046 .35814 L
.62545 .36927 L
.63016 .37779 L
.63276 .38162 L
.63558 .38506 L
.63815 .38751 L
.64051 .3892 L
.64173 .38986 L
.64304 .3904 L
.64427 .39075 L
.6454 .39095 L
.64672 .39102 L
.64746 .39098 L
.64815 .39089 L
.64942 .39062 L
.65013 .39039 L
.65077 .39015 L
.65217 .38948 L
.65346 .38869 L
.65636 .38633 L
.65892 .3836 L
.66162 .38006 L
.67113 .36257 L
.68131 .33629 L
Mistroke
.69966 .27554 L
.71953 .20455 L
.72999 .17112 L
.74109 .14223 L
.74585 .13249 L
.75097 .12402 L
.7539 .12016 L
.75658 .11728 L
.75928 .11503 L
.76063 .11415 L
.76185 .11349 L
.76303 .11298 L
.76415 .11262 L
.76532 .11236 L
.7666 .11222 L
.76771 .11222 L
.76889 .11235 L
.7699 .11255 L
.77101 .11288 L
.77231 .11341 L
.7735 .11403 L
.77618 .11587 L
.77866 .11814 L
.78101 .12078 L
.7856 .12723 L
.79066 .13626 L
.80091 .15998 L
.81933 .21558 L
.84029 .28468 L
.84947 .3119 L
.85952 .33695 L
.86424 .34654 L
.86928 .35503 L
.87403 .36127 L
.87613 .36344 L
.87836 .36535 L
.87957 .36622 L
.8809 .36704 L
.88213 .36766 L
.88325 .36811 L
.88457 .36851 L
.8853 .36867 L
.88599 .36878 L
.88722 .36887 L
.88792 .36886 L
.88856 .36882 L
.88982 .36864 L
.89101 .36835 L
.89207 .36798 L
.89323 .36749 L
Mistroke
.89581 .36596 L
.89819 .36408 L
.90291 .35903 L
.90795 .35175 L
.91705 .33417 L
.93772 .27845 L
.97619 .16718 L
Mfstroke
% End of Graphics
MathPictureEnd
%%PSTrailer
end
grestore

%%EPS Trailer
